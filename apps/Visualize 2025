// Fusion Near Real-time
// Near real-time monitoring of forest disturbance by fusion of multi-sensor data

// Visualizing pantropical results for 2025 (Pantropical)

// ---------------------------------------------------------------
// Imports and predefined variables:
var listener = 0;
var utCommon = require('users/xjtang/FNRT:utilities/common');
var utNRT = require('users/xjtang/FNRT:utilities/nrt');
var utInput = require('users/xjtang/FNRT:utilities/input');
var utChart = require('users/xjtang/FNRT:utilities/chart');
var plotter = require('users/xjtang/FNRT:dev/plotter (live)');

// ---------------------------------------------------------------
// Parameters
var params = {
  forestMask: ee.ImageCollection('ESA/WorldCover/v200').first().eq(10),
  biomeMask: ee.Image('projects/fusionnrt/assets/misc/biome_mask'),
  grid: ee.FeatureCollection('projects/fusionnrt/assets/misc/GLANCE_V01_SA_GEOG_TILE')
          .filterMetadata('land', 'equals', 1),
  area: ee.FeatureCollection('projects/fusionnrt/assets/misc/areas').geometry(),
  wd: 'projects/fusionnrt/assets/amazon/',
  proj: 'EPSG:4326',
  bucket: 'fnrt-amazon',
  cloud: false
};

//params.past = ee.ImageCollection('projects/fusionnrt/assets/archive/alerts_2024')
//                  .mosaic().select('Deforestaion').unmask().eq(0);
params.alerts = ee.ImageCollection('projects/fusionnrt/assets/ghana/2025/alerts')
                  .merge(ee.ImageCollection('projects/servir-wa/projects_ast/near_real_time/2025/alerts'))
                  .merge(ee.ImageCollection('projects/fusionnrt/assets/africa/alerts'))
                  .merge(ee.ImageCollection('projects/fusionnrt/assets/amazon/alerts'))
                  .merge(ee.ImageCollection('projects/fusionnrt/assets/eastafrica/alerts'))
                  .merge(ee.ImageCollection('projects/fusionnrt/assets/sea/mainland/alerts'))
                  .merge(ee.ImageCollection('projects/fusionnrt/assets/sea/maritime/alerts'))
                  //.map(function(x){return x.updateMask(params.past)});

params.period = {};
params.period.training = {
  start: '2022-01-01',
  end: '2024-12-31'
};
params.period.monitor = {
  start: '2025-01-01',
  end: '2025-12-31'
};
params.period.full = {
  start: params.period.training.start,
  end: params.period.monitor.end
};
params.period.alert = '2025-01-01';
     
params.training = {};
params.training.S2 = {
  sensor: 'Sentinel-2',
  short: 'S2',
  band: 'NDFI',
  res: 20,
  harmonics: 3,
  enable: true
};
params.training.S1 = {
  sensor: 'Sentinel-1',
  short: 'S1',
  band: 'VH',
  res: 10,
  enable: true,
  harmonics: 1,
  minImage: 20
};
params.training.LST = {
  sensor: 'Landsat',
  short: 'LST',
  band: 'NDFI',
  res: 30,
  looseMasking: true,
  harmonics: 3,
  enable: true
};

params.monitor = {
    strikeOut: 4,
    monitorWindow: 5,
    maxZ: 25,
    res: 20,
    recover: false,
    resume: true,
    minSize: 25
  };
params.monitor.S2 = {
  sensor: 'Sentinel-2',
  short: 'S2',
  id: 2,
  zThres: 3.5,
  directional: 1,
  changeOnly: false,
  minRMSE: 250,
  maxValue: 10000
};
params.monitor.S1 = {
  sensor: 'Sentinel-1',
  short: 'S1',
  id: 3,
  zThres: 2.25,
  directional: 1,
  changeOnly: true,
  minRMSE: 0.01
};
params.monitor.LST = {
  sensor: 'Landsat',
  short: 'LST',
  id: 1,
  zThres: 3.5,
  directional: 1,
  changeOnly: false,
  minRMSE: 250,
  maxValue: 10000
};

params.preprocess = {};
params.preprocess.S1 = {
  bands: ['VH', 'VV', 'ratio', 'angle'],
  orbit: 'Both', // Auto, Both, Ascending, or Descending
  model: 'volume', // volume, surface, or direct
  elevation: ee.Image('USGS/SRTMGL1_003'),
  buffer: 30,
  rawPower: false,
  splitOrbit: true,
  normScale: 10,
  scaleFactor: 30,
  edgeMask: -30 
};
params.preprocess.endMembers = {
  gv: [500, 900, 400, 6100, 3000, 1000],
  npv: [1400, 1700, 2200, 3000, 5500, 3000],
  soil: [2000, 3000, 3400, 5800, 6000, 5800],
  shade: [0, 0, 0, 0, 0, 0],
  cloud: [9000, 9600, 8000, 7800, 7200, 6500],
  cfThreshold: 0.05
};

params.visual = {};
params.visual.S2 = {
  sensor: 'Sentinel-2',
  short: 'S2',
  bands: ['SWIR1', 'NIR', 'RED'],
  min: 0,
  max: 5000
};
params.visual.S1 = {
  sensor: 'Sentinel-1',
  short: 'S1',
  bands: ['VV', 'VH', 'ratio'],
  min: 10,
  max: 30
};
params.visual.LST = {
  sensor: 'Landsat',
  short: 'LST',
  bands: ['SWIR1', 'NIR', 'RED'],
  min: 0,
  max: 5000
};
params.visual.mask = {
  min: 0,
  max: 1,
  palette: ['white', 'blue']
};

var toFracYear = function(date) {
  var year = date.get('year');
  var fYear = date.difference(ee.Date.fromYMD(year, 1, 1), 'year');
  return year.add(fYear);
};

params.visual.alerts = {
  min: 0,
  max: 75,
  palette: ['#ffffcc','#ffeda0','#fed976','#feb24c','#fd8d3c','#fc4e2a','#e31a1c','#bd0026','#800026']
};

params.plot = {};
params.plot.dateFormat = 1;
params.plot.padding = 0.2;

params.driver = {};
params.driver.size = 3500;

params.protectedArea = ee.FeatureCollection("WCMC/WDPA/current/polygons")
                      .filterBounds(params.area);

// ---------------------------------------------------------------
// Initialization:
var uiPanel = plotter.createPanel(params);
ui.root.clear();
ui.root.add(uiPanel);

var mapPanel = uiPanel.getFirstPanel().widgets().get(0);

mapPanel.addLayer(params.forestMask.clip(params.area), {min:0, max:1}, 'Forest Mask', false);
mapPanel.addLayer(params.biomeMask.clip(params.area), {min:0, max:1}, 'Biome Mask', false);
mapPanel.addLayer(params.protectedArea, {color:'black'}, 'Protected Area', false);
mapPanel.addLayer(params.area, {color: 'red'}, 'Study Area', false);
mapPanel.centerObject(params.area, 3);
mapPanel.setOptions('SATELLITE');

// End