// Fusion Near Real-time
// Near real-time monitoring of forest disturbance by fusion of multi-sensor data

// Running Model Training

// ---------------------------------------------------------------
// Imports and Parameters:
var utNRT = require('users/xjtang/FNRT:utilities/nrt');
var utParams = require('users/xjtang/FNRT:utilities/parameters');
var utInput = require('users/xjtang/FNRT:utilities/input');
var params = utParams.params;
var maxTile = 1000;
var extraInfo = {
  version: '0.1',
  user: 'xjtang'
};

// ---------------------------------------------------------------
// Functions:
var runTraining = function(region, params, sensor, band, harmonics) {
  var data = utInput.getData(region, params, params.period.training, sensor, false);
  var training = utNRT.training(data, band, harmonics);//.updateMask(params.forestMask);
  return training;
};

var saveTraining = function(training, des, output, region, res) {
  Export.image.toAsset({
        image: training,
        scale: res,
        description: des,
        assetId: output,
        region: region,
        maxPixels: 1e13,
        pyramidingPolicy: {'.default': 'sample'}
  });
};

var runTile = function(region, params, h, v) {
  var tileID = 'h' + ('000' + h).substr(-3) + 'v' + ('000' + v).substr(-3);
  var trainingEndYear = params.period.training.end.slice(0, 4);
  
  if (params.training.LST.enable) {
    var LST_des = tileID + '_' + params.training.LST.short + '_' + trainingEndYear + '_T';
    var LST_Training = runTraining(region, params, 'Landsat', params.training.LST.band,
                                    params.training.LST.harmonics)
            .set({tile: tileID, sensor: 'Landsat', short: params.training.LST.short})
            .set({horizontal: h, vertical: v})
            .set({harmonics: params.training.LST.harmonics})
            .set({start: params.period.training.start, end: params.period.training.end})
            .set(extraInfo).set({endYear: parseInt(trainingEndYear)})
            .set({'system:time_start': ee.Date(params.period.training.start).millis()})
            .set({'system:time_end': ee.Date(params.period.training.end).millis()})
            .set({'system:index': LST_des});
    var LST_Output = params.wd + 'training/' + LST_des;
    try{
      ee.data.getAsset(LST_Output);
      print('Already exists: ' + LST_des);
    } catch(err) {
      saveTraining(LST_Training, LST_des, LST_Output, region, params.training.LST.res);
    }
  }
  
  if (params.training.S2.enable) {
    var S2_des = tileID + '_' + params.training.S2.short + '_' + trainingEndYear + '_T';
    var S2_Training = runTraining(region, params, 'Sentinel-2', params.training.S2.band,
                                  params.training.S2.harmonics)
            .set({tile: tileID, sensor: 'Sentinel-2', short: params.training.S2.short})
            .set({horizontal: h, vertical: v})
            .set({harmonics: params.training.S2.harmonics})
            .set({start: params.period.training.start, end: params.period.training.end})
            .set(extraInfo).set({endYear: parseInt(trainingEndYear)})
            .set({'system:time_start': ee.Date(params.period.training.start).millis()})
            .set({'system:time_end': ee.Date(params.period.training.end).millis()})
            .set({'system:index': S2_des});
    var S2_Output = params.wd + 'training/' + S2_des;
    try{
      ee.data.getAsset(S2_Output);
      print('Already exists: ' + S2_des);
    } catch(err) {
      saveTraining(S2_Training, S2_des, S2_Output, region, params.training.S2.res);
    }
  }
  
  if (params.training.S1.enable) {
    if (params.preprocess.S1.splitOrbit){
      var S1_data = utInput.getData(region, params, params.period.training, 'Sentinel-1', false);
      var orbitList = ee.Dictionary(S1_data.aggregate_histogram('relativeOrbitNumber_start'))
                        .keys();
      var nOrbit = orbitList.length().getInfo();
      for (var j = 0; j < nOrbit; j++) {
        var orbit = ee.Number.parse(orbitList.get(j));
        var S1_data_orbit = S1_data.filter(ee.Filter.eq('relativeOrbitNumber_start', orbit));
        var nImage = S1_data_orbit.size().getInfo();
        //print(nImage);
        if (nImage > params.training.S1.minImage) {
          //print(orbit);
          //print(S1_data_orbit);
          var S1_des = tileID + '_' + params.training.S1.short + '_' + trainingEndYear + '_OB' + orbit.getInfo() + '_T';
          var S1_Training = utNRT.training(S1_data_orbit, params.training.S1.band, params.training.S1.harmonics)
                              .updateMask(params.forestMask).updateMask(params.biomeMask)
                              .set({tile: tileID, sensor: 'Sentinel-1', short: params.training.S1.short})
                              .set({horizontal: h, vertical: v})
                              .set({harmonics: params.training.S1.harmonics})
                              .set({start: params.period.training.start, end: params.period.training.end})
                              .set(extraInfo).set({orbit: orbit}).set({endYear: parseInt(trainingEndYear)})
                              .set({'system:time_start': ee.Date(params.period.training.start).millis()})
                              .set({'system:time_end': ee.Date(params.period.training.end).millis()})
                              .set({'system:index': S1_des});
          var S1_Output = params.wd + 'training/' + S1_des;
          try{
            ee.data.getAsset(S1_Output);
            print('Already exists: ' + S1_des);
          } catch(err) {
            saveTraining(S1_Training, S1_des, S1_Output, region, params.training.S1.res);
          }
        } else {
          print('Orbit ' + orbit.getInfo() + ' not enough image.');
        }
      }
    } else {
      var S1_des = tileID + '_' + params.training.S1.short +  '_' + trainingEndYear + '_T';
      var S1_Training = runTraining(region, params, 'Sentinel-1', params.training.S1.band, params.training.S1.harmonics)
              .set({tile: tileID, sensor: 'Sentinel-1', short: params.training.S1.short})
              .set({horizontal: h, vertical: v})
              .set({harmonics: params.training.S1.harmonics})
              .set({start: params.period.training.start, end: params.period.training.end})
              .set(extraInfo).set({endYear: parseInt(trainingEndYear)})
              .set({'system:time_start': ee.Date(params.period.training.start).millis()})
              .set({'system:time_end': ee.Date(params.period.training.end).millis()})
              .set({'system:index': S1_des});
      var S1_Output = params.wd + 'training/' + S1_des;
      try{
        ee.data.getAsset(S1_Output);
        print('Already exists: ' + S1_des);
      } catch(err) {
        saveTraining(S1_Training, S1_des, S1_Output, region, params.training.S1.res);
      }
    }
  }
};
  
var runRegion = function(region, params) {
  var tiles = params.grid.filterBounds(region);
  var tiles2 = tiles.toList(maxTile);
  var nTile = tiles.size().getInfo();
  for (var i = 0; i < nTile; i++) {
    var tile = ee.Feature(tiles2.get(i));
    var h = tile.getNumber('horizontal').getInfo();
    var v = tile.getNumber('vertical').getInfo();
    var geometry = tile.geometry();
    runTile(geometry, params, h, v);
  }
};

var runSingleTile = function(h, v, params) {
  var tile = params.grid.filter(ee.Filter.eq('horizontal', h))
                        .filter(ee.Filter.eq('vertical', v))
                        .first();
  var geometry = tile.geometry();
  runTile(geometry, params, h, v);
};

// ---------------------------------------------------------------
// Run:
//runRegion(params.area, params);
//runTile(params.area, params, 1, 1);
//runSingleTile(48, 25, params);

// ---------------------------------------------------------------
// Exports:
exports = {
  runRegion: runRegion,
  runTile: runTile,
  runSingleTile: runSingleTile,
};

// End