// Slope Correction for Sentinel-1 GRD

// Original snapshot of users/andreasvollrath/radar:slope_correction_lib.js on 11/4/2020
// Modified by Hanfeng Gu
// Reformated by Xiaojing Tang

// ---------------------------------------------------------------

// slope correction function
var slope_correction = function (collection, options) {

  // set defaults if undefined options
  options = options || {};
  var model = options.model || 'volume';
  var elevation = options.elevation || ee.Image('USGS/SRTMGL1_003');
  var buffer = options.buffer || 0;
  var rawPower = options.rawPower || false;
  
  // we need a 90 degree in radians image for a couple of calculations
  var ninetyRad = ee.Image.constant(90).multiply(Math.PI / 180);
  
  // Volumetric Model Hoekman 1990
  function _volume_model(theta_iRad, alpha_rRad){
    var nominator = (ninetyRad.subtract(theta_iRad).add(alpha_rRad)).tan();
    var denominator = (ninetyRad.subtract(theta_iRad)).tan();
    return nominator.divide(denominator);
  }
  
  // surface model Ulander et al. 1996
  function _surface_model(theta_iRad, alpha_rRad, alpha_azRad){
    var nominator = (ninetyRad.subtract(theta_iRad)).cos();
    var denominator = alpha_azRad.cos()
      .multiply((ninetyRad.subtract(theta_iRad).add(alpha_rRad)).cos());
    return nominator.divide(denominator);
  }
  
  // buffer function (thanks Noel)
  function _erode(img, distance) {
    var d = (img.not().unmask(1)
        .fastDistanceTransform(30).sqrt()
        .multiply(ee.Image.pixelArea().sqrt()));
    return img.updateMask(d.gt(distance));
  }
  
  // calculate masks
  function _masking(alpha_rRad, theta_iRad, proj, buffer){
    // layover, where slope > radar viewing angle
    var layover = alpha_rRad.lt(theta_iRad).rename('layover');
    // shadow
    var shadow = alpha_rRad.gt(ee.Image.constant(-1).multiply(ninetyRad.subtract(theta_iRad))).rename('shadow');
    // combine layover and shadow
    var mask = layover.and(shadow);
    // add buffer to final mask
    if (buffer > 0)
        mask = _erode(mask, buffer);
    return mask.rename('no_data_mask');
 }
 
  function _correct(image){
    // get image geometry and projection
    var geom = image.geometry();
    var proj = image.select(1).projection();
    // get look direction angle
    var heading = (ee.Terrain.aspect(
        image.select('angle')).reduceRegion(ee.Reducer.mean(), geom, 1000).get('aspect')
        );
    // Sigma0 to Power of input image
    var sigma0Pow = ee.Image.constant(10).pow(image.divide(10.0));
    // Radar geometry
    var theta_iRad = image.select('angle').multiply(Math.PI / 180).clip(geom);
    var phi_iRad = ee.Image.constant(heading).multiply(Math.PI / 180);
    // Terrain geometry
    var alpha_sRad = ee.Terrain.slope(elevation).select('slope')
        .multiply(Math.PI / 180).setDefaultProjection(proj).clip(geom);
    var phi_sRad = ee.Terrain.aspect(elevation).select('aspect')
        .multiply(Math.PI / 180).setDefaultProjection(proj).clip(geom);
    // Model geometry
    //reduce to 3 angle
    var phi_rRad = phi_iRad.subtract(phi_sRad);
    // slope steepness in range
    var alpha_rRad = (alpha_sRad.tan().multiply(phi_rRad.cos())).atan();
    // slope steepness in azimuth
    var alpha_azRad = (alpha_sRad.tan().multiply(phi_rRad.sin())).atan();
    // Gamma_nought
    var gamma0 = sigma0Pow .divide(theta_iRad.cos());
           // models
    if (model == 'volume')
      var corrModel = _volume_model(theta_iRad, alpha_rRad);
    if (model == 'surface')
      var corrModel = _surface_model(theta_iRad, alpha_rRad, alpha_azRad);
    if (model == 'direct')
      var corrModel = _direct_model(theta_iRad, alpha_rRad, alpha_azRad);
    // apply model to derive gamma0_flat
    var gamma0_flat = gamma0.divide(corrModel);
    // transform to dB-scale
    var gamma0_flatDB = (ee.Image.constant(10)
        .multiply(gamma0_flat.log10()).select(['VV', 'VH'])
        );
    // get Layover/Shadow mask
    var mask = _masking(alpha_rRad, theta_iRad, proj, buffer);
    // return retults
    if (rawPower) {
      return gamma0_flat.addBands(mask)
        .copyProperties(image)
        .copyProperties(image, ['system:time_start']);
    } else {
      return gamma0_flatDB.addBands(mask)
        .copyProperties(image)
        .copyProperties(image, ['system:time_start']);
    }
  }
  
  // run correction function and return corrected collection
  return collection.map(_correct);
};

// ---------------------------------------------------------------

//Refined Lee Filtering (img must be in natural units, i.e. not in dB!)
function refined_lee(img) {
  
  // Set up 3x3 kernels 
  var weights3 = ee.List.repeat(ee.List.repeat(1, 3), 3);
  var kernel3 = ee.Kernel.fixed(3, 3, weights3, 1, 1, false);
  var mean3 = img.reduceNeighborhood(ee.Reducer.mean(), kernel3);
  var variance3 = img.reduceNeighborhood(ee.Reducer.variance(), kernel3);
  
  // Use a sample of the 3x3 windows inside a 7x7 windows to determine gradients and directions
  var sample_weights = ee.List([[0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 1, 0, 1, 0], 
                                [0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 1, 0, 1, 0], 
                                [0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 1, 0, 1, 0],
                                [0, 0, 0, 0, 0, 0, 0]]);
  var sample_kernel = ee.Kernel.fixed(7, 7, sample_weights, 3, 3, false);
  
  // Calculate mean and variance for the sampled windows and store as 9 bands
  var sample_mean = mean3.neighborhoodToBands(sample_kernel); 
  var sample_var = variance3.neighborhoodToBands(sample_kernel);
  
  // Determine the 4 gradients for the sampled windows
  var gradients = sample_mean.select(1).subtract(sample_mean.select(7)).abs();
  gradients = gradients.addBands(sample_mean.select(6).subtract(sample_mean.select(2)).abs());
  gradients = gradients.addBands(sample_mean.select(3).subtract(sample_mean.select(5)).abs());
  gradients = gradients.addBands(sample_mean.select(0).subtract(sample_mean.select(8)).abs());
  
  // And find the maximum gradient amongst gradient bands
  var max_gradient = gradients.reduce(ee.Reducer.max());
  
  // Create a mask for band pixels that are the maximum gradient
  var gradmask = gradients.eq(max_gradient);
  
  // duplicate gradmask bands: each gradient represents 2 directions
  gradmask = gradmask.addBands(gradmask);
  
  // Determine the 8 directions
  var directions = sample_mean.select(1).subtract(sample_mean.select(4))
                    .gt(sample_mean.select(4).subtract(sample_mean.select(7)))
                    .multiply(1);
  directions = directions.addBands(sample_mean.select(6).subtract(sample_mean.select(4))
                .gt(sample_mean.select(4).subtract(sample_mean.select(2))).multiply(2));
  directions = directions.addBands(sample_mean.select(3).subtract(sample_mean.select(4))
                .gt(sample_mean.select(4).subtract(sample_mean.select(5))).multiply(3));
  directions = directions.addBands(sample_mean.select(0).subtract(sample_mean.select(4))
                .gt(sample_mean.select(4).subtract(sample_mean.select(8))).multiply(4));

  // The next 4 are the not() of the previous 4
  directions = directions.addBands(directions.select(0).not().multiply(5));
  directions = directions.addBands(directions.select(1).not().multiply(6));
  directions = directions.addBands(directions.select(2).not().multiply(7));
  directions = directions.addBands(directions.select(3).not().multiply(8));
  
  // Mask all values that are not 1-8
  directions = directions.updateMask(gradmask);
  
  // "collapse" the stack into a singe band image 
  // (due to masking, each pixel has just one value (1-8) in it's directional band, 
  //    and is otherwise masked)
  directions = directions.reduce(ee.Reducer.sum());  
  //var pal = ['ffffff','ff0000','ffff00', '00ff00', '00ffff', '0000ff', 'ff00ff', '000000'];
  //Map.addLayer(directions.reduce(ee.Reducer.sum()), {min:1, max:8, palette: pal}, 'Directions', false);
  var sample_stats = sample_var.divide(sample_mean.multiply(sample_mean));
  
  // Calculate localNoiseVariance
  var sigmaV = sample_stats.toArray().arraySort().arraySlice(0, 0,5)
                            .arrayReduce(ee.Reducer.mean(), [0]);
                            
  // Set up the 7*7 kernels for directional statistics
  var rect_weights = ee.List.repeat(ee.List.repeat(0, 7), 3)
                      .cat(ee.List.repeat(ee.List.repeat(1, 7), 4));
  var diag_weights = ee.List([[1, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 0], 
                              [1, 1, 1, 0, 0, 0, 0], [1, 1, 1, 1, 0, 0, 0], 
                              [1, 1, 1, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 0], 
                              [1, 1, 1, 1, 1, 1, 1]]);
  var rect_kernel = ee.Kernel.fixed(7, 7, rect_weights, 3, 3, false);
  var diag_kernel = ee.Kernel.fixed(7, 7, diag_weights, 3, 3, false);
  
  // Create stacks for mean and variance using the original kernels. 
  // Mask with relevant direction.
  var dir_mean = img.reduceNeighborhood(ee.Reducer.mean(), rect_kernel)
                    .updateMask(directions.eq(1));
  var dir_var = img.reduceNeighborhood(ee.Reducer.variance(), rect_kernel)
                    .updateMask(directions.eq(1));
  dir_mean = dir_mean.addBands(img.reduceNeighborhood(ee.Reducer.mean(), diag_kernel)
                      .updateMask(directions.eq(6)));
  dir_var = dir_var.addBands(img.reduceNeighborhood(ee.Reducer.variance(), diag_kernel)
                    .updateMask(directions.eq(6)));

  // add the bands for rotated kernels
  dir_mean = dir_mean.addBands(img.reduceNeighborhood(ee.Reducer.mean(), rect_kernel.rotate(1))
                      .updateMask(directions.eq(7)));
  dir_var = dir_var.addBands(img.reduceNeighborhood(ee.Reducer.variance(), rect_kernel.rotate(1))
                    .updateMask(directions.eq(7)));
  dir_mean = dir_mean.addBands(img.reduceNeighborhood(ee.Reducer.mean(), diag_kernel.rotate(1))
                      .updateMask(directions.eq(8)));
  dir_var = dir_var.addBands(img.reduceNeighborhood(ee.Reducer.variance(), diag_kernel.rotate(1))
                    .updateMask(directions.eq(8)));
  dir_mean = dir_mean.addBands(img.reduceNeighborhood(ee.Reducer.mean(), rect_kernel.rotate(2))
                      .updateMask(directions.eq(5)));
  dir_var = dir_var.addBands(img.reduceNeighborhood(ee.Reducer.variance(), rect_kernel.rotate(2))
                    .updateMask(directions.eq(5)));
  dir_mean = dir_mean.addBands(img.reduceNeighborhood(ee.Reducer.mean(), diag_kernel.rotate(2))
                      .updateMask(directions.eq(2)));
  dir_var = dir_var.addBands(img.reduceNeighborhood(ee.Reducer.variance(), diag_kernel.rotate(2))
                    .updateMask(directions.eq(2)));
  dir_mean = dir_mean.addBands(img.reduceNeighborhood(ee.Reducer.mean(), rect_kernel.rotate(3))
                      .updateMask(directions.eq(3)));
  dir_var = dir_var.addBands(img.reduceNeighborhood(ee.Reducer.variance(), rect_kernel.rotate(3))
                    .updateMask(directions.eq(3)));
  dir_mean = dir_mean.addBands(img.reduceNeighborhood(ee.Reducer.mean(), diag_kernel.rotate(3))
                      .updateMask(directions.eq(4)));
  dir_var = dir_var.addBands(img.reduceNeighborhood(ee.Reducer.variance(), diag_kernel.rotate(3))
                    .updateMask(directions.eq(4)));
                    
  // "collapse" the stack into a single band image 
  //  (due to masking, each pixel has just one value in it's directional band, and is otherwise masked)
  dir_mean = dir_mean.reduce(ee.Reducer.sum());
  dir_var = dir_var.reduce(ee.Reducer.sum());
  
  //Multiplicative Noise Mean
  var m = ee.Image(0.9);
  
  // A finally generate the filtered value
  var k = (m.multiply(dir_var)).divide(dir_mean.multiply(dir_mean)
            .multiply(sigmaV).add(m.multiply(m).multiply(dir_var)));
  var result = dir_mean.add(k.multiply(img.subtract(m.multiply(dir_mean))));
  result = result.select('VV').arrayFlatten([['VV']])
            .addBands(result.select('VH').arrayFlatten([['VH']]));
            
  return(result);
}

// ---------------------------------------------------------------

// export function
exports.slope_correction = slope_correction;
exports.refined_lee = refined_lee;